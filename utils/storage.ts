
import { StoredGame, User } from '../types';

const API_BASE_URL = 'https://gr-api-1077557473102.us-east1.run.app'; // Corrected Base URL

// ------------- User API Calls -------------

export const getUsersAPI = async (): Promise<User[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/users`);
    if (!response.ok) {
      throw new Error(`Failed to fetch users: ${response.statusText}`);
    }
    return await response.json() as User[];
  } catch (error) {
    console.error("Error fetching users from API:", error);
    return []; 
  }
};

export const createUserAPI = async (name: string): Promise<User> => {
  try {
    const response = await fetch(`${API_BASE_URL}/users`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name }),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: response.statusText }));
      throw new Error(`Failed to create user: ${errorData.error || response.statusText}`);
    }
    return await response.json() as User;
  } catch (error) {
    console.error("Error creating user via API:", error);
    throw error; 
  }
};

export const updateUserNameAPI = async (userId: string, name: string): Promise<User> => {
  try {
    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {
      method: 'PUT',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ name }),
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: response.statusText }));
      throw new Error(`Failed to update user: ${errorData.error || response.statusText}`);
    }
    return await response.json() as User;
  } catch (error) {
    console.error("Error updating user name via API:", error);
    throw error; 
  }
};

export const deleteUserAPI = async (userId: string): Promise<void> => {
  try {
    const response = await fetch(`${API_BASE_URL}/users/${userId}`, {
      method: 'DELETE',
    });
    if (!response.ok && response.status !== 204) { 
      const errorData = await response.json().catch(() => ({ error: response.statusText }));
      throw new Error(`Failed to delete user: ${errorData.error || response.statusText}`);
    }
  } catch (error) {
    console.error("Error deleting user via API:", error);
    throw error; 
  }
};


// ------------- Game API Calls -------------

export const getPastGamesAPI = async (): Promise<StoredGame[]> => {
  try {
    const response = await fetch(`${API_BASE_URL}/games`);
    if (!response.ok) {
      throw new Error(`Failed to fetch past games: ${response.statusText}`);
    }
    const games = await response.json() as StoredGame[];
    return games.map(game => ({
        ...game,
        date: game.date 
      }));
  } catch (error) {
    console.error("Error loading past games from API:", error);
    return [];
  }
};

// gameData parameter type as per API_CONTRACT.md (frontend doesn't send aiSummary)
export const saveCompletedGameAPI = async (gameData: Omit<StoredGame, 'id' | 'date' | 'aiSummary'>): Promise<StoredGame> => {
  try {
    const response = await fetch(`${API_BASE_URL}/games`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(gameData), // aiSummary is not part of gameData sent by App.tsx
    });
    if (!response.ok) {
      const errorData = await response.json().catch(() => ({ error: response.statusText }));
      throw new Error(`Failed to save game: ${errorData.error || response.statusText}`);
    }
    // The response (StoredGame) will include the aiSummary generated by the backend
    return await response.json() as StoredGame;
  } catch (error) {
    console.error("Error saving game via API:", error);
    throw error; 
  }
};
